"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[37],{3254:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Commands Implementation/init command","title":"init command","description":"The init command is a foundational step in creating a version-controlled project, and it is used to create a repository.","source":"@site/docs/Commands Implementation/init command.md","sourceDirName":"Commands Implementation","slug":"/Commands Implementation/init command","permalink":"/git-php-doc-website/Commands Implementation/init command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Starting Code","permalink":"/git-php-doc-website/starting code"},"next":{"title":"hash-object command","permalink":"/git-php-doc-website/Commands Implementation/hash-object command"}}');var r=i(4848),s=i(8453);const o={},a="init command",c={},d=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"init-command",children:"init command"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://git-scm.com/docs/git-init",children:"init command"})," is a foundational step in creating a version-controlled project, and it is used to create a ",(0,r.jsx)(n.strong,{children:"repository"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Repository"})," is a collection of refs together with an object database containing all objects which are reachable from the refs, possibly accompanied by meta data from one or more porcelains. A repository can share an object database with other repositories via alternates mechanism. \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\r\n-kernal.org"]})}),"\n",(0,r.jsxs)(n.p,{children:["In real Git it creates the ",(0,r.jsx)(n.code,{children:".git"})," directory in the root of your repo, but in this project, we\u2019ll use ",(0,r.jsx)(n.code,{children:".mygit"})," as the repository directory for clarity and to distinguish it from real Git repositories."]}),"\n",(0,r.jsxs)(n.p,{children:["We start by making function ",(0,r.jsx)(n.code,{children:"command_init()"})," then:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Check if a directory with the name ",(0,r.jsx)(n.code,{children:".mygit"})," already exists:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="index.php"',children:"if (is_dir('.mygit')) {\r\n\xa0 echo \"Repository already initialized.\\n\";\r\n\xa0 return;\r\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If it does that means we have already initialized a repository and we output ",(0,r.jsx)(n.code,{children:"Repository already initialized."})," and return."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Create our repository structure:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="index.php"',children:"mkdir('.mygit');\r\nmkdir('.mygit/objects');\r\nmkdir('.mygit/refs');\r\nfile_put_contents('.mygit/HEAD', \"ref: refs/heads/main\\n\");\r\nfile_put_contents('.mygit/index', '');\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".mygit"}),": As we said earlier it is the root directory of our repo. It will store all the metadata needed for version control."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".mygit/objects"}),': This directory will store all our objects (blobs, trees, and commits) "We will explain each one of them" created in our repo, and each object will be stored with a unique hash.']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:".mygit/refs"}),": This directory will contain references, such as branch heads. Branches in Git are pointers to specific commits, and this is where those pointers are stored."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Create the HEAD file:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"file_put_contents('.mygit/HEAD', \"ref: refs/heads/main\\n\");\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"HEAD"}),": It determines the current branch the repo is pointing to, and we initialize it with the main branch ",(0,r.jsx)(n.code,{children:"refs/heads/main"}),' "which we will create later".']}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Create the index file:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"file_put_contents('.mygit/index', '');\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index"}),": The index is a file that stores a list of file names, along with file metadata. (more on that later)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Although we won't implement the branching functionality on this project and will work only on the main branch still ",(0,r.jsx)(n.code,{children:".mygit/refs"})," and ",(0,r.jsx)(n.code,{children:"HEAD"})," are essential parts of Git's architecture."]}),"\n",(0,r.jsxs)(n.p,{children:["At the end, we output a success message ",(0,r.jsx)(n.code,{children:"Initialized MyGit repository."})," to the user."]}),"\n",(0,r.jsx)(n.p,{children:"Now try to run the code using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"php ./index.php init\n"})}),"\n",(0,r.jsx)(n.p,{children:"And the .mygit directory structure should look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:".mygit/\r\n\u251c\u2500\u2500 objects/\r\n\u251c\u2500\u2500 refs/\r\n\u2502 \xa0 \u2514\u2500\u2500 heads/\r\n\u2514\u2500\u2500 HEAD\r\n\u2514\u2500\u2500 index\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",metastring:'title="run"',children:"php ./index.php init\n"})}),"\n",(0,r.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="index.php" showLineNumbers',children:"function command_init()\r\n{\r\n  if (is_dir('.mygit')) {\r\n    echo \"Repository already initialized.\\n\";\r\n    return;\r\n }\r\n\r\n  mkdir('.mygit');\r\n  mkdir('.mygit/objects');\r\n  mkdir('.mygit/refs');\r\n  file_put_contents('.mygit/HEAD', \"ref: refs/heads/main\\n\");\r\n  file_put_contents('.mygit/index', '');\r\n  echo \"Initialized MyGit repository.\\n\";\r\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);