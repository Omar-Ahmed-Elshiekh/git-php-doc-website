"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[809],{2993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"Commands Implementation/log command","title":"log command","description":"The log command is used to view the commit history of a repository. It displays:","source":"@site/docs/Commands Implementation/log command.md","sourceDirName":"Commands Implementation","slug":"/Commands Implementation/log command","permalink":"/git-php-doc-website/Commands Implementation/log command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"commit command","permalink":"/git-php-doc-website/Commands Implementation/commit command"},"next":{"title":"Final thoughts","permalink":"/git-php-doc-website/final"}}');var s=t(4848),i=t(8453);const a={},c="log command",l={},o=[{value:"Command Implementation",id:"command-implementation",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"log-command",children:"log command"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://git-scm.com/docs/git-log",children:"log command"})," is used to view the commit history of a repository. It displays:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The commit hash (SHA-1 identifier)"}),"\n",(0,s.jsx)(n.li,{children:"The author of the commit"}),"\n",(0,s.jsx)(n.li,{children:"The commit timestamp"}),"\n",(0,s.jsx)(n.li,{children:"The commit message"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"command-implementation",children:"Command Implementation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Check if ",(0,s.jsx)(n.code,{children:".mygit/HEAD"})," exists:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'if (!file_exists(".mygit/HEAD")) {\r\n  echo "Error: No commits yet\\n";\r\n  return;\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Ensures that the repository has at least one commit."}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:".mygit/HEAD"})," doesn\u2019t exist, no commits have been made, so it prints an error and exits."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Determine the latest commit hash:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$head_content = trim(file_get_contents(".mygit/HEAD"));\r\n$curr_hash = null;\r\n\r\nif (str_starts_with($head_content, "ref: ")) {\r\n  $ref = substr($head_content, 5);\r\n  if (!file_exists(".mygit/" . $ref)) {\r\n    echo "Error: No commits yet\\n";\r\n    return;\r\n  }\r\n  $curr_hash = trim(file_get_contents(".mygit/" . $ref));\r\n} else {\r\n  $curr_hash = $head_content;\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Reads .mygit/HEAD, which stores either:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A reference (",(0,s.jsx)(n.code,{children:"ref: refs/heads/main"}),"), pointing to a branch\u2019s latest commit."]}),"\n",(0,s.jsx)(n.li,{children:"A direct commit hash (in a detached HEAD state)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["If it\u2019s a reference, we retrieve the latest commit hash from ",(0,s.jsx)(n.code,{children:".mygit/refs/heads/main"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Otherwise, we assume that ",(0,s.jsx)(n.code,{children:".mygit/HEAD"})," contains a commit hash."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Iterate through the commit history:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"while ($curr_hash) {\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The loop iterates over commit objects, starting from ",(0,s.jsx)(n.code,{children:"$curr_hash"})," (latest commit) and following parent commits."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Retrieve and uncompress the commit object:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$dir = ".mygit/objects/" . substr($curr_hash, 0, 2);\r\n$path = $dir . \'/\' . substr($curr_hash, 2);\r\n\r\nif (!file_exists($path)) {\r\n  echo "Error: Commit object not found\\n";\r\n  break;\r\n}\r\n\r\n$compressed = file_get_contents($path);\r\n$data = gzuncompress($compressed);\r\n$parts = explode("\\0", $data, 2);\r\n\r\nif (count($parts) < 2) {\r\n  echo "Error: Invalid commit object format\\n";\r\n  break;\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"we construct the path to the commit object by using the first two characters of the hash as the directory name and the rest as file path."}),"\n",(0,s.jsx)(n.li,{children:"Reads and uncompresses the commit object."}),"\n",(0,s.jsxs)(n.li,{children:["Splits the content at the ",(0,s.jsx)(n.code,{children:"\\0"})," null byte (used to separate the header and commit content)."]}),"\n",(0,s.jsx)(n.li,{children:"If the commit object format is invalid, it prints an error and exits."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Extract commit metadata:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Extract the content:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$content = $parts[1];\r\n$lines = explode("\\n", $content);\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"$parts[1]"})," contains everything after the ",(0,s.jsx)(n.code,{children:"\\0"}),", which the actual commit metadata and message."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Then we split the content into lines."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Initialize variables:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$commit_data = [];\r\n$message = "";\r\n$reading_message = false;\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"$commit_data"})," will store key-value pairs of commit metadata (tree, parent, author)."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"$message"})," will store the commit message."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"$reading_message"})," is a flag to track when we start reading the message."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Process each line:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"foreach ($lines as $line) {\r\n  if (empty(trim($line))) continue;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"We skip empty lines to avoid unnecessary processing."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Handle the commit message:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'if (str_starts_with($line, "message ")) {\r\n  $message = substr($line, 8);\r\n  $reading_message = true;\r\n} else if ($reading_message) {\r\n  $message .= "\\n" . $line;\r\n} else {\r\n  $parts = explode(" ", $line, 2);\r\n  if (count($parts) == 2) {\r\n    $commit_data[$parts[0]] = $parts[1];\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:'If the line starts with "message ", it marks the beginning of the commit message.'}),"\n",(0,s.jsxs)(n.li,{children:["We use ",(0,s.jsx)(n.code,{children:"substr($line, 8)"}),' to remove "message " and stores the actual message.']}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"$reading_message"})," is already true, additional lines are appended to ",(0,s.jsx)(n.code,{children:"$message"})," (we use it to handle multi-line commit messages)."]}),"\n",(0,s.jsx)(n.li,{children:"Else if a line isn\u2019t part of the message, we store it as a key-value pair after separating it into parts."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Example of what's stored in our variables after processing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="example"',children:'$commit_data = [\r\n  "tree" => "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s",\r\n  "parent" => "7a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s",\r\n  "author" => "John Doe john@example.com 1707301245"\r\n];\r\n\r\n$message = "Fixed a major bug\\nthat caused a crash.";\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This part code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$content = $parts[1];\r\n$lines = explode("\\n", $content);\r\n\r\n$commit_data = [];\r\n$message = "";\r\n$reading_message = false;\r\n\r\nforeach ($lines as $line) {\r\n  if (empty(trim($line))) continue;\r\n\r\n  if (str_starts_with($line, "message ")) {\r\n    $message = substr($line, 8);\r\n    $reading_message = true;\r\n  } else if ($reading_message) {\r\n    $message .= "\\n" . $line;\r\n  } else {\r\n    $parts = explode(" ", $line, 2);\r\n    if (count($parts) == 2) {\r\n      $commit_data[$parts[0]] = $parts[1];\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsx)(n.li,{children:"Print commit data:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'echo "\\033[33mcommit " . $curr_hash . "\\033[0m\\n";\r\n\r\nif (isset($commit_data["author"])) {\r\n  $author_data = explode(" ", $commit_data["author"]);\r\n  $timestamp = end($author_data);\r\n  $author_name = implode(" ", array_slice($author_data, 0, -1));\r\n  $date = date("Y-m-d H:i:s", (int) $timestamp) . "\\n";\r\n}\r\necho "\\033[36mAuthor: " . $author_name . "\\033[0m\\n";\r\necho "Date: " . $date;\r\necho "\\n      " . $message . "\\n\\n";\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Prints the commit hash in yellow (",(0,s.jsx)(n.code,{children:"\\033[33m"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"We extracts the author's name and timestamp."}),"\n",(0,s.jsxs)(n.li,{children:["Then we convert the timestamp into a human-readable format (",(0,s.jsx)(n.code,{children:"YYYY-MM-DD HH:MM:SS"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Prints the author\u2019s name in cyan (",(0,s.jsx)(n.code,{children:"\\033[36m"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Prints the commit message."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"7",children:["\n",(0,s.jsx)(n.li,{children:"Move to the parent commit:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$curr_hash = $commit_data["parent"] ?? null;\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Sets ",(0,s.jsx)(n.code,{children:"$curr_hash"})," to the parent commit hash."]}),"\n",(0,s.jsx)(n.li,{children:"If no parent exists, it stops our while loop."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'function command_log()\r\n{\r\n  if (!file_exists(".mygit/HEAD")) {\r\n    echo "Error: No commits yet\\n";\r\n    return;\r\n  }\r\n\r\n  $head_content = trim(file_get_contents(".mygit/HEAD"));\r\n  $curr_hash = null;\r\n\r\n  if (str_starts_with($head_content, "ref: ")) {\r\n    $ref = substr($head_content, 5);\r\n    if (!file_exists(".mygit/" . $ref)) {\r\n      echo "Error: No commits yet\\n";\r\n      return;\r\n    }\r\n    $curr_hash = trim(file_get_contents(".mygit/" . $ref));\r\n  } else {\r\n    $curr_hash = $head_content;\r\n  }\r\n\r\n  while ($curr_hash) {\r\n    $dir = ".mygit/objects/" . substr($curr_hash, 0, 2);\r\n    $path = $dir . \'/\' . substr($curr_hash, 2);\r\n\r\n    if (!file_exists($path)) {\r\n      echo "Error: Commit object not found\\n";\r\n      break;\r\n    }\r\n\r\n    $compressed = file_get_contents($path);\r\n    $data = gzuncompress($compressed);\r\n    $parts = explode("\\0", $data, 2);\r\n\r\n    if (count($parts) < 2) {\r\n      echo "Error: Invalid commit object format\\n";\r\n      break;\r\n    }\r\n\r\n    $content = $parts[1];\r\n    $lines = explode("\\n", $content);\r\n\r\n    $commit_data = [];\r\n    $message = "";\r\n    $reading_message = false;\r\n\r\n    foreach ($lines as $line) {\r\n      if (empty(trim($line)))\r\n        continue;\r\n\r\n      if (str_starts_with($line, "message ")) {\r\n        $message = substr($line, 8);\r\n        $reading_message = true;\r\n      } else if ($reading_message) {\r\n        $message .= "\\n" . $line;\r\n      } else {\r\n        $parts = explode(" ", $line, 2);\r\n        if (count($parts) == 2) {\r\n          $commit_data[$parts[0]] = $parts[1];\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    echo "\\033[33mcommit " . $curr_hash . "\\033[0m\\n";\r\n\r\n    if (isset($commit_data["author"])) {\r\n      $author_data = explode(" ", $commit_data["author"]);\r\n      $timestamp = end($author_data);\r\n      $author_name = implode(" ", array_slice($author_data, 0, -1));\r\n      $date = date("Y-m-d H:i:s", (int) $timestamp) . "\\n";\r\n    }\r\n    echo "\\033[36mAuthor: " . $author_name . "\\033[0m\\n";\r\n    echo "Date: " . $date;\r\n    echo "\\n      " . $message . "\\n\\n";\r\n\r\n    $curr_hash = $commit_data["parent"] ?? null;\r\n  }\r\n\r\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);