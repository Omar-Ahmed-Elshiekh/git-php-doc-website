"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[133],{3045:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Commands Implementation/write-tree command","title":"write-tree command","description":"The write-tree command is used to create a tree object from the current index file (staging area). As we said earlier, a tree object represents the directory structure of a repository at a specific point in time.","source":"@site/docs/Commands Implementation/write-tree command.md","sourceDirName":"Commands Implementation","slug":"/Commands Implementation/write-tree command","permalink":"/git-php-doc-website/Commands Implementation/write-tree command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ls-files command","permalink":"/git-php-doc-website/Commands Implementation/ls-files command"},"next":{"title":"ls-tree command","permalink":"/git-php-doc-website/Commands Implementation/ls-tree command"}}');var i=t(4848),s=t(8453);const c={},o="write-tree command",a={},d=[{value:"Command Implementation",id:"command-implementation",level:3}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"write-tree-command",children:"write-tree command"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://git-scm.com/docs/git-write-tree",children:"write-tree command"})," is used to create a tree object from the current index file (staging area). As we said earlier, a tree object represents the directory structure of a repository at a specific point in time.",(0,i.jsx)(n.br,{}),"\n","Git processes the current index and writes a tree object that can be referenced later by a commit. The output is a SHA-1 hash that uniquely identifies the tree object."]}),"\n",(0,i.jsx)(n.h3,{id:"command-implementation",children:"Command Implementation"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Check if index file exists:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"if (!file_exists('.mygit/index')) {\r\n  echo \"Error: No index file found\\n\";\r\n  return;\r\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check if the index file doesn't exist and output an error message."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Reading and validating the index file:"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This part ensures that only valid file entries are processed before generating the tree object."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$entries = [];\r\n$index_content = file_get_contents(\'.mygit/index\');\r\n\r\nif($index_content === \'\'){\r\n  echo "Error: Index is empty\\n";\r\n  return;\r\n}\r\n\r\n$lines = explode("\\n", trim($index_content));\r\nforeach ($lines as $line) {\r\n  if (empty(trim($line)))\r\n    continue;\r\n\r\n  $parts = explode(" ", trim($line));\r\n  if (count($parts) < 4)\r\n    continue;\r\n\r\n  $entries[] = $parts;\r\n}\r\n\r\n$tree_content = \'\';\r\nforeach ($entries as $entry) {\r\n  $tree_content .= implode(" ", $entry) . "\\n";\r\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We start by reading the index file contents and storing them in ",(0,i.jsx)(n.code,{children:"$index_contents"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Check if the index file is empty, output an error, and return if it is."}),"\n",(0,i.jsx)(n.li,{children:"We split the index contents into lines."}),"\n",(0,i.jsx)(n.li,{children:"We iterate over each line and validate that it is not empty and we skip this iteration if it is."}),"\n",(0,i.jsxs)(n.li,{children:["Then we split each line into parts to validate that each line has the correct data format which is ",(0,i.jsx)(n.code,{children:"<mode> <type> <hash> <path>"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Then we append the ",(0,i.jsx)(n.code,{children:"$path"})," array to ",(0,i.jsx)(n.code,{children:"$entries"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["At the end, we reconstruct the tree content again by concatenating each entry to ",(0,i.jsx)(n.code,{children:"$tree_content"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Add a tree object header:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$header = "tree " . strlen($tree_content) . "\\0";\r\n$full_content = $header . $tree_content;\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We make our header by concatenating tree with length of the tree content and null byte (we explained Git storage format earlier)."}),"\n",(0,i.jsx)(n.li,{children:"Then we concatenate the header with the tree content to get the full content that will be stored."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Compute the sha-1 hash:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$hash = sha1($full_content);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A SHA-1 hash is computed for the full tree object which uniquely identifies the object."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Compress the tree object:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$compressed = gzcompress($full_content);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Compress the tree content with Zlib compression."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsx)(n.li,{children:"Store the tree object:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title=./index.php"',children:'$dir = ".mygit/objects/" . substr($hash, 0, 2);\r\nif (!is_dir($dir)) {\r\n  mkdir($dir, 0777, true);\r\n}\r\n\r\n$path = $dir . "/" . substr($hash, 2);\r\nfile_put_contents($path, $compressed);\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We create our directory path ",(0,i.jsx)(n.code,{children:"$dir"})," by concatenating ",(0,i.jsx)(n.code,{children:"'.mygit/objects/'"})," with the first two characters in ",(0,i.jsx)(n.code,{children:"$hash"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If the path ",(0,i.jsx)(n.code,{children:"$dir"})," didn't exist we make a new directory using ",(0,i.jsx)(n.code,{children:"mkdir()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["We create our file path ",(0,i.jsx)(n.code,{children:"$path"})," by concatenating ",(0,i.jsx)(n.code,{children:"$dir"})," path with ",(0,i.jsx)(n.code,{children:"/"})," and the rest of the file hash. Then we save the compressed content into our file."]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:"Output and return the hash:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"echo $hash . PHP_EOL;\r\nreturn $hash;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"At the end, we output the calculated hash and return it."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'function command_write_tree()\r\n{\r\n  if (!file_exists(\'.mygit/index\')) {\r\n    echo "Error: No index file found\\n";\r\n    return;\r\n  }\r\n\r\n  $entries = [];\r\n  $index_content = file_get_contents(\'.mygit/index\');\r\n\r\n  if($index_content === \'\'){\r\n    echo "Error: Index is empty\\n";\r\n    return;\r\n  }\r\n\r\n  $lines = explode("\\n", trim($index_content));\r\n  foreach ($lines as $line) {\r\n    if (empty(trim($line)))\r\n      continue;\r\n\r\n    $parts = explode(" ", trim($line));\r\n    if (count($parts) < 4)\r\n      continue;\r\n\r\n    $entries[] = $parts;\r\n  }\r\n\r\n  $tree_content = \'\';\r\n  foreach ($entries as $entry) {\r\n    $tree_content .= implode(" ", $entry) . "\\n";\r\n  }\r\n\r\n  $header = "tree " . strlen($tree_content) . "\\0";\r\n  $full_content = $header . $tree_content;\r\n\r\n  $hash = sha1($full_content);\r\n  $compressed = gzcompress($full_content);\r\n\r\n  $dir = ".mygit/objects/" . substr($hash, 0, 2);\r\n  if (!is_dir($dir)) {\r\n    mkdir($dir, 0777, true);\r\n  }\r\n\r\n  $path = $dir . "/" . substr($hash, 2);\r\n  file_put_contents($path, $compressed);\r\n  echo $hash . PHP_EOL;\r\n  return $hash;\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function c(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);