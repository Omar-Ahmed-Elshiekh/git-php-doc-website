"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[619],{1165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Commands Implementation/cat-file command","title":"cat-file command","description":"The cat-file command is used to read and display the contents or other data of a Git object, given its hash. This helps inspect stored objects within the repository.","source":"@site/docs/Commands Implementation/cat-file command.md","sourceDirName":"Commands Implementation","slug":"/Commands Implementation/cat-file command","permalink":"/git-php-doc-website/Commands Implementation/cat-file command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hash-object command","permalink":"/git-php-doc-website/Commands Implementation/hash-object command"},"next":{"title":"add command","permalink":"/git-php-doc-website/Commands Implementation/add command"}}');var r=t(4848),i=t(8453);const a={},c="cat-file command",o={},l=[{value:"Command Implementation",id:"command-implementation",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cat-file-command",children:"cat-file command"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://git-scm.com/docs/git-cat-file",children:"cat-file command"})," is used to read and display the contents or other data of a Git object, given its hash. This helps inspect stored objects within the repository."]}),"\n",(0,r.jsx)(n.p,{children:"In Git there is a lot of options using the cat-file command, and usually we pass a short version of the hash to it, but for simplicity, in this project we'll pass the full hash and print all the file data."}),"\n",(0,r.jsx)(n.p,{children:"We already learned about objects in the last section so we can start implementing the function now."}),"\n",(0,r.jsx)(n.h3,{id:"command-implementation",children:"Command Implementation"}),"\n",(0,r.jsxs)(n.p,{children:["First, we define the function ",(0,r.jsx)(n.code,{children:"command_cat_file($args)"}),"."]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Get object hash:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$hash = (string) $args[0];\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We get the hash from ",(0,r.jsx)(n.code,{children:"$args[0]"})," and save it as a string so we can operate on it."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Get the directory and file paths:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$dir = '.mygit/objects/' . substr($hash, 0, 2);\r\n$file = $dir . '/' . substr($hash, 2);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["As we did in the hash-object command, we create our directory path ",(0,r.jsx)(n.code,{children:"$dir"})," by concatenating ",(0,r.jsx)(n.code,{children:"'.mygit/objects/'"})," with the first two characters in ",(0,r.jsx)(n.code,{children:"$hash"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["We create our file path ",(0,r.jsx)(n.code,{children:"$file"})," path by concatenating ",(0,r.jsx)(n.code,{children:"$dir"})," path with ",(0,r.jsx)(n.code,{children:"/"})," and the rest of the file hash."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Check if the file exists:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'if (!file_exists($file)) {\r\n  echo "Error: Object not found.\\n";\r\n  return;\r\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check if the file path provided exists and if not we display an error message and return."}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Get compressed data:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$compressed = file_get_contents($file);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We get the data of the file which is currently compressed."}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"Uncompress data:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$data = gzuncompress($compressed);\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We uncompress data using ",(0,r.jsx)(n.a,{href:"https://www.php.net/manual/en/function.gzuncompress.php",children:(0,r.jsx)(n.code,{children:"gzuncompress()"})})," built-in function which is the uncompress function for Zlib."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:"Validate data:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'if ($data === false) {\r\n  echo "Error: Failed to decompress the object.\\n";\r\n  return;\r\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"$data"})," is false that means the ",(0,r.jsx)(n.code,{children:"gzuncompress()"})," function failed to uncompress the data and return false so we output an error message to the user and return."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"7",children:["\n",(0,r.jsx)(n.li,{children:"Get file contents:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$parts = explode("\\0", $data, 2);\r\nif (count($parts) < 2) {\r\n  echo "Error: Invalid MyGit object format.\\n";\r\n  return;\r\n}\r\n\r\n$fileContent = $parts[1];\r\n\r\necho $fileContent;\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Remember the null byte ",(0,r.jsx)(n.code,{children:"\\0"})," we used earlier in the hash-object command here is where it comes in handy, we use it to separate the object data (",(0,r.jsx)(n.code,{children:"<type> <size>"}),") from the actual content that we want."]}),"\n",(0,r.jsxs)(n.li,{children:["We use the ",(0,r.jsx)(n.code,{children:"explode()"})," built-in function to separate ",(0,r.jsx)(n.code,{children:"$data"})," string using the separator ",(0,r.jsx)(n.code,{children:"\\0"})," into an array."]}),"\n",(0,r.jsxs)(n.li,{children:["Check if the number of elements in array ",(0,r.jsx)(n.code,{children:"$parts"})," is less than 2 which means there was something wrong with this object and we output an error message to the user and return."]}),"\n",(0,r.jsxs)(n.li,{children:["Take the actual data that we want which is at index 1 in ",(0,r.jsx)(n.code,{children:"$parts"})," and store it in ",(0,r.jsx)(n.code,{children:"$fileContent"})," then we output it."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",metastring:'title="run example"',children:"php ./index.php cat_file d0ab265094c565b783e6880d73ff0dbf315d8812\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",metastring:'title="output example"',children:"this is test text\n"})}),"\n",(0,r.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'function command_cat_file($args)\r\n{\r\n  $hash = (string) $args[0];\r\n\r\n  $dir = \'.mygit/objects/\' . substr($hash, 0, 2);\r\n  $file = $dir . \'/\' . substr($hash, 2);\r\n\r\n  if (!file_exists($file)) {\r\n    echo "Error: Object not found.\\n";\r\n    return;\r\n  }\r\n\r\n  $compressed = file_get_contents($file);\r\n\r\n  $data = gzuncompress($compressed);\r\n\r\n  if ($data === false) {\r\n    echo "Error: Failed to decompress the object.\\n";\r\n    return;\r\n  }\r\n\r\n  $parts = explode("\\0", $data, 2);\r\n  if (count($parts) < 2) {\r\n    echo "Error: Invalid MyGit object format.\\n";\r\n    return;\r\n  }\r\n\r\n  $fileContent = $parts[1];\r\n\r\n  echo $fileContent;\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);