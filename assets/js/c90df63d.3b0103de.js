"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[182],{7363:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Commands Implementation/hash-object command","title":"hash-object command","description":"The hash-object command is used to compute the ID value \\"aka. name\\" of an object, and sometimes we use it to write the object, although it is not a frequently used command and it is considered as a low-level command still it is for sure an important one and in our implementation version, we\'ll use this function to do hashing functionality in upcoming commands.","source":"@site/docs/Commands Implementation/hash-object command.md","sourceDirName":"Commands Implementation","slug":"/Commands Implementation/hash-object command","permalink":"/git-php-doc-website/Commands Implementation/hash-object command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"init command","permalink":"/git-php-doc-website/Commands Implementation/init command"},"next":{"title":"cat-file command","permalink":"/git-php-doc-website/Commands Implementation/cat-file command"}}');var i=t(4848),r=t(8453);const l={},a="hash-object command",o={},c=[{value:"What are objects?",id:"what-are-objects",level:3},{value:"Object:",id:"object",level:4},{value:"Where objects are being stored?",id:"where-objects-are-being-stored",level:3},{value:"How objects are stored?",id:"how-objects-are-stored",level:3},{value:"Object types:",id:"object-types",level:4},{value:"Command Implementation",id:"command-implementation",level:3}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"hash-object-command",children:"hash-object command"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://git-scm.com/docs/git-hash-object",children:"hash-object command"}),' is used to compute the ID value "aka. name" of an object, and sometimes we use it to write the object, although it is not a frequently used command and it is considered as a low-level command still it is for sure an important one and in our implementation version, we\'ll use this function to do hashing functionality in upcoming commands.']}),"\n",(0,i.jsx)(n.h3,{id:"what-are-objects",children:"What are objects?"}),"\n",(0,i.jsx)(n.h4,{id:"object",children:"Object:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The unit of storage in Git. It is uniquely identified by the SHA-1 hash of its contents. Consequently, an object cannot be changed."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Every object has an:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object name (id)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The unique identifier of an object. The object name is usually represented by a 40-character hexadecimal string. Also colloquially called SHA-1."}),"\n",(0,i.jsx)(n.li,{children:"That means object names are not just regular file names, it is a unique name calculated depending on the content of the file. This makes sure that all the files are unique from each other."}),"\n",(0,i.jsx)(n.li,{children:'We conclude that we do not modify files in Git even if you change just one character in a file the name of the file changes too and is stored in a different location "Don\'t get overridden".'}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object type"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'One of the identifiers "commit", "tree", "tag" or "blob" describes the type of an object.'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"where-objects-are-being-stored",children:"Where objects are being stored?"}),"\n",(0,i.jsxs)(n.p,{children:["The path where git stores its objects is created by calculating the ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/SHA-1",children:"SHA-1 hash"})," of its contents. Git splits the hash into two parts: the first two characters of the hash, and the rest. Then it uses the first part as the directory name, and the rest as the file name."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",metastring:'title="example"',children:"./.mygit/objects/d4/5a25929cd70b0264caea33b209c9cfa845f6bc\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-objects-are-stored",children:"How objects are stored?"}),"\n",(0,i.jsx)(n.p,{children:'First, we need to understand the storage format. An object has a header that specifies its type ("commit", "tree", "tag" or "blob"), the size of object contents in bytes, null byte, then the object compressed content, Git uses Zlib for compression.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",metastring:'title="example"',children:"blob <size>\\0<content>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For example, if the file content is ",(0,i.jsx)(n.code,{children:"this is file"})," the blob object file would look like this after decompression."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",metastring:'title="example"',children:"blob 12\\0this is file\n"})}),"\n",(0,i.jsx)(n.h4,{id:"object-types",children:"Object types:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Blob:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Stores the content of a file."}),"\n",(0,i.jsx)(n.li,{children:"Contains no metadata like filenames or permissions."}),"\n",(0,i.jsx)(n.li,{children:"Identified by a unique SHA-1 hash."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Tree:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Represents a directory and its structure."}),"\n",(0,i.jsx)(n.li,{children:"Points to blobs (files) and other trees (subdirectories)."}),"\n",(0,i.jsx)(n.li,{children:"Stores filenames and permissions."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Commit:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Represents a snapshot of the repository."}),"\n",(0,i.jsx)(n.li,{children:"Points to a tree object and parent commits."}),"\n",(0,i.jsx)(n.li,{children:"Includes metadata (author, timestamp, message)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Tag:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Marks a specific commit, often for releases."}),"\n",(0,i.jsx)(n.li,{children:"Can be lightweight (simple pointer) or annotated (with metadata)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For now, that's all the knowledge we need to start implementing our function."}),"\n",(0,i.jsx)(n.h3,{id:"command-implementation",children:"Command Implementation"}),"\n",(0,i.jsxs)(n.p,{children:["First, we define function ",(0,i.jsx)(n.code,{children:"command_hash_object($args)"}),", the ",(0,i.jsx)(n.code,{children:"$args"})," is an array of arguments that get passed to our function from the ",(0,i.jsx)(n.code,{children:"user_call_func"})," that we used ",(0,i.jsx)(n.a,{href:"/git-php-doc-website/starting%20code",children:"earlier"})," to read user input."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Parse arguments:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$filePath = $args[0];\r\n$writeEnable = $args[1] ?? false;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Extract file path from arguments."}),"\n",(0,i.jsx)(n.li,{children:"Check if the second argument is provided to decide if the object should be written to the repo or not."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Check if the file exists:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'if (!file_exists($filePath)) {\r\n  echo "Error: File not found.\\n";\r\n  return;\r\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check if the file path provided exists and if not we display an error message and return."}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Read the file:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$fileContents = file_get_contents($filePath);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Read the file contents and store them in ",(0,i.jsx)(n.code,{children:"$fileContents"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Create the object header:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$header = "blob " . strlen($fileContents) . "\\0";\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Create the object header by concatenating the following:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"blob"}),": which is the object type."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"strlen($fileContents)"}),": which is the length of the contents inside the file."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"\\0"}),": which is the null byte (used to separate the header from the file contents)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Concatenate header and contents:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$fullContent = $header . $fileContents;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["concatenate the header with the file contents to get the final storage format",(0,i.jsx)(n.br,{}),"\n","which is ",(0,i.jsx)(n.code,{children:"blob <size>\\0<content>"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"6",children:["\n",(0,i.jsx)(n.li,{children:"Compute the SHA-1 hash:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$hash = sha1($fullContent);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["calculate the SHA-1 hash of the object by using ",(0,i.jsx)(n.a,{href:"https://www.php.net/manual/en/function.sha1.php",children:(0,i.jsx)(n.code,{children:"sha1()"})})," php built-in function."]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"7",children:["\n",(0,i.jsx)(n.li,{children:"Write object to repo if writeEnable is true:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"if ($writeEnable) {\r\n  $compressed = gzcompress($fullContent);\r\n\r\n  $dir = '.mygit/objects/' . substr($hash, 0, 2);\r\n  if (!is_dir($dir)) {\r\n    mkdir($dir, 0777, true);\r\n  }\r\n\r\n  $filePath = $dir . '/' . substr($hash, 2);\r\n  file_put_contents($filePath, $compressed);\r\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the ",(0,i.jsx)(n.code,{children:"$writeEnable"})," value was true:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We compress the file content using ",(0,i.jsx)(n.a,{href:"https://www.php.net/manual/en/function.gzcompress.php",children:(0,i.jsx)(n.code,{children:"gzcompress()"})})," built-in function which is the compress function for Zlib."]}),"\n",(0,i.jsxs)(n.li,{children:["We create our directory path ",(0,i.jsx)(n.code,{children:"$dir"})," by concatenating ",(0,i.jsx)(n.code,{children:"'.mygit/objects/'"})," with the first two characters in ",(0,i.jsx)(n.code,{children:"$hash"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["If the path ",(0,i.jsx)(n.code,{children:"$dir"})," didn't exist we make a new directory using ",(0,i.jsx)(n.a,{href:"https://www.php.net/manual/en/function.mkdir.php",children:(0,i.jsx)(n.code,{children:"mkdir()"})})," built-in function."]}),"\n",(0,i.jsxs)(n.li,{children:["We create our file path ",(0,i.jsx)(n.code,{children:"$filePath"})," by concatenating ",(0,i.jsx)(n.code,{children:"$dir"})," path with ",(0,i.jsx)(n.code,{children:"/"})," and the rest of the file hash. Then we save the compressed content into our file."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.ol,{start:"8",children:["\n",(0,i.jsx)(n.li,{children:"Output and return the hash:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"echo $hash . PHP_EOL;\r\nreturn $hash;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"At the end, we output the calculated hash and return it (because we will use this function later in upcoming commands)."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",metastring:'title="run example"',children:"php ./index.php hash_object test.txt true #if we want it to write\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",metastring:'title="output example"',children:"d0ab265094c565b783e6880d73ff0dbf315d8812\n"})}),"\n",(0,i.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="index.php"',children:'function command_hash_object($args)\r\n{\r\n  $filePath = $args[0];\r\n  $writeEnable = $args[1] ?? false;\r\n\r\n  if (!file_exists($filePath)) {\r\n    echo "Error: File not found.\\n";\r\n    return;\r\n  }\r\n\r\n  $fileContents = file_get_contents($filePath);\r\n\r\n  $header = "blob " . strlen($fileContents) . "\\0";\r\n\r\n  $fullContent = $header . $fileContents;\r\n\r\n  $hash = sha1($fullContent);\r\n\r\n  if ($writeEnable) {\r\n    $compressed = gzcompress($fullContent);\r\n\r\n    $dir = \'.mygit/objects/\' . substr($hash, 0, 2);\r\n    if (!is_dir($dir)) {\r\n      mkdir($dir, 0777, true);\r\n    }\r\n\r\n    $filePath = $dir . \'/\' . substr($hash, 2);\r\n    file_put_contents($filePath, $compressed);\r\n  }\r\n  echo $hash . PHP_EOL;\r\n  return $hash;\r\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);