"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[982],{431:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Commands Implementation/ls-tree command","title":"ls-tree command","description":"The ls-tree command is used to list the contents of a given tree object showing their metadata such as mode, type, hash, and name. This command is useful for inspecting a specific version of a repository\u2019s directory structure.","source":"@site/docs/Commands Implementation/ls-tree command.md","sourceDirName":"Commands Implementation","slug":"/Commands Implementation/ls-tree command","permalink":"/git-php-doc-website/Commands Implementation/ls-tree command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"write-tree command","permalink":"/git-php-doc-website/Commands Implementation/write-tree command"},"next":{"title":"commit command","permalink":"/git-php-doc-website/Commands Implementation/commit command"}}');var s=r(4848),i=r(8453);const a={},o="ls-tree command",l={},c=[{value:"Command Implementation",id:"command-implementation",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ls-tree-command",children:"ls-tree command"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://git-scm.com/docs/git-ls-tree",children:"ls-tree command"})," is used to list the contents of a given tree object showing their metadata such as mode, type, hash, and name. This command is useful for inspecting a specific version of a repository\u2019s directory structure."]}),"\n",(0,s.jsx)(n.h3,{id:"command-implementation",children:"Command Implementation"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Parse the Command Arguments:"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In Git, ls-tree function can take alot of flags but for simplicity in our implementation we'll create only one flag ",(0,s.jsx)(n.code,{children:"--name-only"}),'. This flag is used when we want to list only filenames (instead of the "long" output), one per line.']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$hash = $args[0] ?? null;\r\n$flag = false;\r\n\r\nif (isset($args[0]) && $args[0] === "--name-only") {\r\n  if (count($args) < 2) {\r\n    echo "Error: Hash required.\\n";\r\n    return;\r\n  }\r\n  $flag = true;\r\n  $hash = $args[1];\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Extract the first argument which is the tree object's hash."}),"\n",(0,s.jsxs)(n.li,{children:["Checks if the --name-only flag is passed:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If --name-only is found, it requires an additional argument (the hash)."}),"\n",(0,s.jsx)(n.li,{children:"If no hash is provided after the flag, it prints an error and exits."}),"\n",(0,s.jsx)(n.li,{children:"Otherwise, it sets $flag = true, meaning the output will include only filenames."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Locate and retrieve the tree object:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$dir = '.mygit/objects/' . substr($hash, 0, 2);\r\n$file = $dir . '/' . substr($hash, 2);\r\n\r\nif (!file_exists($file)) {\r\n  echo \"Error: Tree object not found.\\n\";\r\n  return;\r\n}\r\n\r\n$compressed = file_get_contents($file);\r\n$data = gzuncompress($compressed);\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We create our directory path ",(0,s.jsx)(n.code,{children:"$dir"})," by concatenating ",(0,s.jsx)(n.code,{children:"'.mygit/objects/'"})," with the first two characters in ",(0,s.jsx)(n.code,{children:"$hash"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["We create our file path ",(0,s.jsx)(n.code,{children:"$file"})," by concatenating ",(0,s.jsx)(n.code,{children:"$dir"})," path with ",(0,s.jsx)(n.code,{children:"/"})," and the rest of the file hash."]}),"\n",(0,s.jsx)(n.li,{children:"If the file doesn't exist output an error and return."}),"\n",(0,s.jsxs)(n.li,{children:["Then we get the compressed file contents from ",(0,s.jsx)(n.code,{children:"$file"})," and store the uncompressed data in ",(0,s.jsx)(n.code,{children:"$data"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Validate tree object format:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$parts = explode("\\0", $data, 2);\r\nif (count($parts) < 2) {\r\n  echo "Error: Invalid object format.\\n";\r\n  return;\r\n}\r\n\r\n[$header, $content] = $parts;\r\nif (!str_starts_with($header, \'tree \')) {\r\n  echo "Error: Not a tree object.\\n";\r\n  return;\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Split the uncompressed data into two parts header and content."}),"\n",(0,s.jsxs)(n.li,{children:["Validate that ",(0,s.jsx)(n.code,{children:"$parts"})," has the two parts and output an error and return if not."]}),"\n",(0,s.jsxs)(n.li,{children:["Check if our header starts with ",(0,s.jsx)(n.code,{children:"'tree '"})," (which means it is a tree object) and output an error and return if not."]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Parse and display tree entries:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$lines = explode("\\n", trim($content));\r\n\r\nforeach ($lines as $line) {\r\n  if (empty($line))\r\n    continue;\r\n\r\n  $parts = explode(" ", trim($line), 4);\r\n  if (count($parts) !== 4) {\r\n    continue;\r\n  }\r\n\r\n  [$mode, $type, $hash, $name] = $parts;\r\n\r\n  if ($flag) {\r\n    echo $name . "\\n";\r\n  } else {\r\n    echo "$mode $type $hash $name\\n";\r\n  }\r\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Split the tree content into lines, each representing a file entry."}),"\n",(0,s.jsxs)(n.li,{children:["Iterates through each line:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Skips empty lines."}),"\n",(0,s.jsx)(n.li,{children:"Splits the line into four parts: mode, type, hash, and name."}),"\n",(0,s.jsx)(n.li,{children:"If --name-only is set, only prints filenames."}),"\n",(0,s.jsx)(n.li,{children:"Otherwise, print the full metadata: mode, type, hash, name."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'function command_ls_tree($args)\r\n{\r\n  $hash = $args[0] ?? null;\r\n  $flag = false;\r\n\r\n  if (isset($args[0]) && $args[0] === "--name-only") {\r\n    if (count($args) < 2) {\r\n      echo "Error: Hash required.\\n";\r\n      return;\r\n    }\r\n    $flag = true;\r\n    $hash = $args[1];\r\n  }\r\n\r\n  $dir = \'.mygit/objects/\' . substr($hash, 0, 2);\r\n  $file = $dir . \'/\' . substr($hash, 2);\r\n\r\n  if (!file_exists($file)) {\r\n    echo "Error: Tree object not found.\\n";\r\n    return;\r\n  }\r\n\r\n  $compressed = file_get_contents($file);\r\n  $data = gzuncompress($compressed);\r\n  $parts = explode("\\0", $data, 2);\r\n  if (count($parts) < 2) {\r\n    echo "Error: Invalid object format.\\n";\r\n    return;\r\n  }\r\n\r\n  [$header, $content] = $parts;\r\n  if (!str_starts_with($header, \'tree \')) {\r\n    echo "Error: Not a tree object.\\n";\r\n    return;\r\n  }\r\n\r\n  $lines = explode("\\n", trim($content));\r\n\r\n  foreach ($lines as $line) {\r\n    if (empty($line))\r\n      continue;\r\n\r\n    $parts = explode(" ", trim($line), 4);\r\n    if (count($parts) !== 4) {\r\n      continue;\r\n    }\r\n\r\n    [$mode, $type, $hash, $name] = $parts;\r\n\r\n    if ($flag) {\r\n      echo $name . "\\n";\r\n    } else {\r\n      echo "$mode $type $hash $name\\n";\r\n    }\r\n  }\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);