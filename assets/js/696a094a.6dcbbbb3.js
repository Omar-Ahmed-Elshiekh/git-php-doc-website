"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[439],{8989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Commands Implementation/ls-files command","title":"ls-files command","description":"The ls-files command this command is used to list the files currently in the index file or the working tree, it is similar to dir or ls in the command line but for the index file.","source":"@site/docs/Commands Implementation/ls-files command.md","sourceDirName":"Commands Implementation","slug":"/Commands Implementation/ls-files command","permalink":"/git-php-doc-website/Commands Implementation/ls-files command","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"add command","permalink":"/git-php-doc-website/Commands Implementation/add command"},"next":{"title":"write-tree command","permalink":"/git-php-doc-website/Commands Implementation/write-tree command"}}');var r=t(4848),s=t(8453);const l={},d="ls-files command",o={},a=[{value:"Command Implementation",id:"command-implementation",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"ls-files-command",children:"ls-files command"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://git-scm.com/docs/git-ls-files",children:"ls-files command"})," this command is used to list the files currently in the index file or the working tree, it is similar to ",(0,r.jsx)(n.code,{children:"dir"})," or ",(0,r.jsx)(n.code,{children:"ls"})," in the command line but for the index file."]}),"\n",(0,r.jsx)(n.h3,{id:"command-implementation",children:"Command Implementation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Parse the Command Arguments:"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In Git, ls-files function can take alot of flags but for simplicity in our implementation we'll create only one flag ",(0,r.jsx)(n.code,{children:"-s"})," or ",(0,r.jsx)(n.code,{children:"--stage"}),". This flag is used when we want to show staged contents' mode bits, object name and stage number in the output. but here we'll make output all index info."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$flag = $args[0] ?? null;\r\n$index_path = './.mygit/index';\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We check if the user passed args (flags)."}),"\n",(0,r.jsxs)(n.li,{children:["We save the path of index file in ",(0,r.jsx)(n.code,{children:"$index_path"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Check if index file exists:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'if (!file_exists($index_path)) {\r\n  echo "Error: Index file not found. Have you added any files?\\n";\r\n  return;\r\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check if the index file don't exists and output error message."}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Read and validate index contents"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:"$index_content = file_get_contents($index_path);\r\n\r\nif (empty($index_content)) {\r\n  return;\r\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We get the contents of index file and check if the index is empty."}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Proccess and output index contents:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'$index_entries = explode("\\n", $index_content);\r\nforeach ($index_entries as $entry) {\r\n  $path = explode(" ", trim($entry), 4)[3];\r\n  if ($flag === "--stage" || $flag === "-s") {\r\n    echo $entry . "\\n";\r\n  } else if ($flag === null) {\r\n    echo $path . "\\n";\r\n  } else {\r\n    echo "Error: Undefined flag " . $flag . "\\n";\r\n    return;\r\n  }\r\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We separate index contents into lines and store it in ",(0,r.jsx)(n.code,{children:"$index_entries"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"We separate each entry into four parts and we get the fourth element in the array which is the path."}),"\n",(0,r.jsx)(n.li,{children:"If the user entered the flag we output all the index entry data."}),"\n",(0,r.jsx)(n.li,{children:"Else if no flag provided we output just the path of the file."}),"\n",(0,r.jsx)(n.li,{children:"Else we output an error and return."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'function command_ls_files($args)\r\n{\r\n  $flag = $args[0] ?? null;\r\n  $index_path = \'./.mygit/index\';\r\n\r\n  if (!file_exists($index_path)) {\r\n    echo "Error: Index file not found. Have you added any files?\\n";\r\n    return;\r\n  }\r\n\r\n  $index_content = file_get_contents($index_path);\r\n\r\n  if (empty($index_content)) {\r\n    return;\r\n  }\r\n\r\n  $index_entries = explode("\\n", $index_content);\r\n  foreach ($index_entries as $entry) {\r\n    $path = explode(" ", trim($entry), 4)[3];\r\n    if ($flag === "--stage" || $flag === "-s") {\r\n      echo $entry . "\\n";\r\n    } else if ($flag === null) {\r\n      echo $path . "\\n";\r\n    } else {\r\n      echo "Error: Undefined flag " . $flag . "\\n";\r\n      return;\r\n    }\r\n  }\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);