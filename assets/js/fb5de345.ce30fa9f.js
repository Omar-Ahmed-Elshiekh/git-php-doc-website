"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[813],{5087:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"starting code","title":"Starting Code","description":"First, we create the main file that we are going to work on which is index.php","source":"@site/docs/starting code.md","sourceDirName":".","slug":"/starting code","permalink":"/git-php-doc-website/starting code","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/git-php-doc-website/"},"next":{"title":"init command","permalink":"/git-php-doc-website/Commands Implementation/init command"}}');var i=t(4848),a=t(8453);const s={},c="Starting Code",o={},d=[];function l(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"starting-code",children:"Starting Code"})}),"\n",(0,i.jsx)(n.p,{children:"First, we create the main file that we are going to work on which is index.php"}),"\n",(0,i.jsx)(n.p,{children:"We will start this by making a variable command this will store the command entered by the user and an array commands which will contain all the commands in our projects."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php" showLineNumbers',children:"<?php\r\n\r\n$command = $argv[1] ?? null;\r\n$commands = ['init', 'add', 'commit', 'log', 'hash_object', 'cat_file', 'write_tree', 'ls_tree', 'ls_files'];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The line ",(0,i.jsx)(n.code,{children:"$command = $argv[1] ?? null;"})," will take the command from user which will be at index 1 in ",(0,i.jsx)(n.a,{href:"https://www.php.net/manual/en/reserved.variables.argv.php",children:(0,i.jsx)(n.code,{children:"$argv"})})," and store in in ",(0,i.jsx)(n.code,{children:"$command"}),", if there is no args it will be null."]}),"\n",(0,i.jsxs)(n.p,{children:["The line ",(0,i.jsx)(n.code,{children:"$commands = ['init', ..."})," is the set of commands that we have in our project that we will use to validate the user input."]}),"\n",(0,i.jsx)(n.p,{children:"Then we have to check that the command entered by the user is valid."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php" showLineNumbers',children:'if (!$command || !in_array($command, $commands)) {\r\n  echo "Error: Usage ./index.php <$command>\\n";\r\n  echo "Available commands: init, add, commit, log, hash_object, cat_file, write_tree, ls_tree, ls_files\\n";\r\n  exit(1);\r\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This code check if the ",(0,i.jsx)(n.code,{children:"$command"})," is empty or the ",(0,i.jsx)(n.code,{children:"$command"})," is not found in ",(0,i.jsx)(n.code,{children:"$commands"})," array which means there was an error in the user input and echo error massages to user and exit."]}),"\n",(0,i.jsxs)(n.p,{children:["If the if condition did not excute then there were no errors and we take input from user and pass it to ",(0,i.jsx)(n.a,{href:"https://www.php.net/manual/en/function.call-user-func.php",children:(0,i.jsx)(n.code,{children:"call_user_func()"})}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php"',children:'call_user_func("command_$command", array_slice($argv, 2));\n'})}),"\n",(0,i.jsx)(n.p,{children:"First argument is the name of our command and second argument is the rest of the args entered by user."}),"\n",(0,i.jsx)(n.p,{children:"Full code for this section:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="./index.php" showLineNumbers',children:"<?php\r\n\r\n$command = $argv[1] ?? null;\r\n$commands = ['init', 'add', 'commit', 'log', 'hash_object', 'cat_file', 'write_tree', 'ls_tree', 'ls_files'];\r\n\r\nif (!$command || !in_array($command, $commands)) {\r\n  echo \"Error: Usage ./index.php <$command>\\n\";\r\n  echo \"Available commands: init, add, commit, log, hash_object, cat_file, write_tree, ls_tree\\n\";\r\n  exit(1);\r\n}\r\n\r\ncall_user_func(\"command_$command\", array_slice($argv, 2));\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);